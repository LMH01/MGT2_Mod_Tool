plugins {
    id "java"
    id "application"
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-simple:_'
    implementation 'org.slf4j:slf4j-api:_'
    implementation 'com.moandjiezana.toml:toml4j:_'
    implementation 'org.jetbrains:annotations:_'
    integrationTestCompile group: 'junit', name: 'junit', version: '4.13.2'
    integrationTestCompile 'org.slf4j:slf4j-api:_'
    integrationTestCompile 'org.slf4j:slf4j-simple:_'
    integrationTestCompile 'com.moandjiezana.toml:toml4j:_'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

// comment in if log level should be temporarily set to debug
//run {
//    jvmArgs = ['-Dorg.slf4j.simpleLogger.defaultLogLevel=debug']
//}

sourceCompatibility = 1.21
targetCompatibility = 1.21
project.version = "5.0.0" //remember to change version in main class
archivesBaseName = "MGT2_Mod_Tool"

group = "com.github.lmh01"
application.mainClass = "com.github.lmh01.mgt2mt.MadGamesTycoon2ModTool"

// required so jar task includes dependencies
jar {
    manifest {
        attributes "Main-Class": application.mainClass
    }

    archiveVersion = ""

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task createZip(type: Zip, group: 'build') {
    dependsOn jar

    from tasks.jar.archivePath
    from ('assets')

    destinationDirectory = new File("build/releases")
    archiveFileName = "MGT2_Mod_Tool_${project.version}.zip"
}

task integrationTest(type: Test, group: 'verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

compileJava {options.encoding = "UTF-8"}

test {
    useJUnitPlatform()
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test