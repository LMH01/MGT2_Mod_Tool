plugins {
    id "java"
    id "application"
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation 'org.slf4j:slf4j-simple:1.7.32'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    implementation 'org.jetbrains:annotations:22.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0'
    integrationTestCompile group: 'junit', name: 'junit', version: '4.13.2'
    integrationTestCompile 'org.slf4j:slf4j-api:1.7.32'
    integrationTestCompile 'org.slf4j:slf4j-simple:1.7.32'
    integrationTestCompile 'com.moandjiezana.toml:toml4j:0.7.2'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
project.version = "3.2.0" //remember to change version in main class
archivesBaseName = "MGT2_Mod_Tool"

group = "com.github.lmh01"
application.mainClassName = "com.github.lmh01.mgt2mt.MadGamesTycoon2ModTool"

// required so jar task includes dependencies
jar {
    manifest {
        attributes "Main-Class": application.mainClassName
    }

    archiveVersion = ""

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task createZip(type: Zip, group: 'build') {
    dependsOn jar

    from tasks.jar.archivePath
    from ('assets')

    destinationDirectory = new File("build/releases")
    archiveFileName = "MGT2_Mod_Tool_${project.version}.zip"
}

task integrationTest(type: Test, group: 'verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

compileJava {options.encoding = "UTF-8"}

test {
    useJUnitPlatform()
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test